"context"
	"html/template"
	"log"
	"net/http"
	"time"
"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.mongodb.org/mongo-driver/mongo/readpref"

func indexHandler(w http.ResponseWriter, r *http.Request) {
	client, err := mongo.NewClient(options.Client().ApplyURI("mongodb://localhost:27017"))
	if err != nil {
		log.Fatal(err)
	}
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	err = client.Connect(ctx)
	if err != nil {
		log.Fatal(err)
	}
	defer client.Disconnect(ctx)
	defer cancel()

	err = client.Ping(ctx, readpref.Primary())
	if err != nil {
		log.Fatal(err)
	}

	// databases, err := client.ListDatabaseNames(ctx, bson.M{})
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// fmt.Println(databases)

	var resturants []resturant

	collection := client.Database("test").Collection("restaurants")
	opts := options.Find()
	var limit int64 = 5
	var skip int64 = 10
	opts.SetLimit(limit)
	opts.SetSkip(skip)
	opts.SetProjection(bson.M{"_id": 0, "name": 1, "cuisine": 1, "borough": 1})
	cur, err := collection.Find(ctx, bson.M{}, opts)
	// projectstage := bson.D{{"$project", bson.D{
	// 	{"lenGrades", 1}, {"address", 1}, {"borough", 1}, {"cuisine", 1}, {"name", 1}, {"restaurant_id", 1}, {"grades", 1},
	// 	{"filteredGrades", bson.D{{"$filter", bson.D{{"input", "$grades"}, {"as", "grade"}, {"cond", bson.D{{"$gte", bson.D{{"$$grade.score", 13}}}}}}}}},
	// }},
	// }
	// matchstage := bson.D{{"$match", bson.D{{"$expr", bson.D{{"$eq", bson.D{{"$size", "$grades"}, {"$size", "$filteredGrades"}}}}}}}}
	// cur, err := collection.Aggregate(ctx, mongo.Pipeline{projectstage, matchstage})
	// if err != nil {
	// 	panic(err)
	// }

	// for cur.Next(ctx) {
	// 	var resturant bson.M
	// 	if err = cur.Decode(&resturant); err != nil {
	// 		log.Fatal(err)
	// 	}
	// 	fmt.Println(resturant)
	// }

	if err = cur.All(ctx, &resturants); err != nil {
		log.Fatal(err)
	}
	// t := template.New("index.html")
	t, err := template.ParseFiles("index.html")
	if err != nil {
		panic(err)
	}
	defer cur.Close(ctx)
	err = t.Execute(w, Responseres{

		Resturants: resturants,
	})
	if err != nil {
		panic(err)
	}

}